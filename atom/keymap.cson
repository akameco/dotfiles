# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# If you're having trouble with your keybindings not working, try the
# Keybinding Resolver: `Cmd+.` on OS X and `Ctrl+.` on other platforms. See the
# Debugging Guide for more information:
# * https://atom.io/docs/latest/hacking-atom-debugging#check-the-keybindings
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'atom-text-editor.vim-mode.normal-mode':
	'g f': 'open-this:here'
	'ctrl-w f': 'open-this:split-down'
	'ctrl-w F': 'open-this:split-right'

'atom-text-editor.vim-mode:not(.insert-mode)':
	'g l': 'pane:show-next-item'
	'g h': 'pane:show-previous-item'
	': v s': 'pane:split-right'
	': s p': 'pane:split-down'

'atom-workspace':
	'ctrl-i': 'cursor-history:next'
	'ctrl-o': 'cursor-history:prev'
	'ctrl-cmd-i': 'cursor-history:next-within-editor'
	'ctrl-cmd-o': 'cursor-history:prev-within-editor'

'atom-text-editor:not([mini])':
	'ctrl-e': 'emmet:expand-abbreviation'
	'ctrl-k': 'custom:snippet-open-or-next'

'atom-text-editor':
	', x': 'XO:Fix'

'editor':
	'ctrl-k': 'unset!'
